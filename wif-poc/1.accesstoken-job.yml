---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: gcp-provider
  namespace: crossplane-system
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  namespace: crossplane-system
  name: secret-manager-role
rules:
- apiGroups: [""]
  resources: ["secrets"]
  verbs: ["get", "create", "update"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: secret-manager-role-binding
  namespace: crossplane-system
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: secret-manager-role
subjects:
- kind: ServiceAccount
  name: gcp-provider
  namespace: crossplane-system
---
apiVersion: batch/v1
kind: CronJob
metadata:
  name: gcloud-token-updater-cron
  namespace: crossplane-system
spec:
  schedule: "*/50 * * * *"
  jobTemplate:
    spec:
      template:
        spec:
          restartPolicy: OnFailure
          serviceAccountName: gcp-provider
          containers:
          - name: gcloud-token-updater
            image: google/cloud-sdk:latest
            command: ["/bin/bash", "-c"]
            args:
            - |
              set -e

              SECRET_NAME="gcp-auth"
              NAMESPACE="crossplane-system"
              KEY_NAME="access-token"
              gcloud config set project fluid-mind-188102

              gcloud auth login --cred-file $GOOGLE_APPLICATION_CREDENTIALS > /dev/null 2>&1
              
              # Ensure gcloud is authenticated
              if ! gcloud auth print-access-token > /dev/null 2>&1; then
                echo "Error: gcloud is not authenticated. Please authenticate before running this script."
                exit 1
              fi

              # Generate the access token
              ACCESS_TOKEN=$(gcloud auth print-access-token)
              if [ -z "$ACCESS_TOKEN" ]; then
                echo "Error: Failed to generate the access token."
                exit 1
              fi

              # Check if the Kubernetes secret already exists
              SECRET_EXISTS=$(kubectl get secret "$SECRET_NAME" -n "$NAMESPACE" --ignore-not-found)

              if [ -n "$SECRET_EXISTS" ]; then
                echo "Secret $SECRET_NAME exists. Updating it..."
                kubectl create secret generic "$SECRET_NAME" \
                  --namespace "$NAMESPACE" \
                  --from-literal="$KEY_NAME=$ACCESS_TOKEN" \
                  --dry-run=client -o yaml | kubectl apply -f -
              else
                echo "Creating secret $SECRET_NAME..."
                kubectl create secret generic "$SECRET_NAME" \
                  --namespace "$NAMESPACE" \
                  --from-literal="$KEY_NAME=$ACCESS_TOKEN"
              fi

              echo "Operation completed successfully."
            env:
            - name: GOOGLE_APPLICATION_CREDENTIALS
              value: /etc/workload-identity/credential-configuration.json
            resources:
              limits:
                memory: "128Mi"
                cpu: "500m"
              requests:
                memory: "64Mi"
                cpu: "250m"
            volumeMounts:
            - mountPath: /var/run/service-account
              name: token
              readOnly: true
            - mountPath: /etc/workload-identity
              name: workload-identity-credential-configuration
              readOnly: true
          volumes:
            - name: token
              projected:
                defaultMode: 420
                sources:
                - serviceAccountToken:
                    audience: https://iam.googleapis.com/projects/284077247800/locations/global/workloadIdentityPools/rancher-cowboy/providers/rancher-desktop
                    expirationSeconds: 3600
                    path: token
            - configMap:
                defaultMode: 420
                name: gcp-wif
              name: workload-identity-credential-configuration
